// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id           Int            @id @default(autoincrement())
  name         String
  email        String         @unique
  password     String
  role         Role           @default(USER)
  notes        Note[]
  categories   Category[]
  tags         Tag[]
  createdAt    DateTime       @default(now())
  Collaborator Collaborator[]

  @@map("users")
}

model Note {
  id            Int            @id @default(autoincrement())
  userId        Int
  title         String?
  content       String
  categoryId    Int?
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  category      Category?      @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  tags          NoteTag[]
  collaborators Collaborator[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("notes")
}

model Category {
  id     Int    @id @default(autoincrement())
  name   String
  userId Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  notes  Note[]

  @@map("categories")
}

model Tag {
  id     Int    @id @default(autoincrement())
  name   String @unique
  userId Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  notes NoteTag[]

  @@map("tags")
}

model NoteTag {
  noteId Int
  tagId  Int
  note   Note @relation(fields: [noteId], references: [id], onDelete: Cascade)
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([noteId, tagId])
  @@map("noteTags")
}

model Collaborator {
  id         Int    @id @default(autoincrement())
  noteId     Int
  userId     Int
  permission String @default("view")
  note       Note   @relation(fields: [noteId], references: [id], onDelete: Cascade)
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("collaborators")
}
